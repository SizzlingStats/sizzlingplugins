// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SizzEvent.proto

#ifndef PROTOBUF_SizzEvent_2eproto__INCLUDED
#define PROTOBUF_SizzEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace SizzEvent {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SizzEvent_2eproto();
void protobuf_AssignDesc_SizzEvent_2eproto();
void protobuf_ShutdownFile_SizzEvent_2eproto();

class SizzEvent;
class SizzEvent_EventData;

enum SizzEvent_EventData_DATA_TYPES {
  SizzEvent_EventData_DATA_TYPES_TYPE_STRING = 1,
  SizzEvent_EventData_DATA_TYPES_TYPE_INT = 2,
  SizzEvent_EventData_DATA_TYPES_TYPE_FLOAT = 3
};
bool SizzEvent_EventData_DATA_TYPES_IsValid(int value);
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData_DATA_TYPES_DATA_TYPES_MIN = SizzEvent_EventData_DATA_TYPES_TYPE_STRING;
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData_DATA_TYPES_DATA_TYPES_MAX = SizzEvent_EventData_DATA_TYPES_TYPE_FLOAT;
const int SizzEvent_EventData_DATA_TYPES_DATA_TYPES_ARRAYSIZE = SizzEvent_EventData_DATA_TYPES_DATA_TYPES_MAX + 1;

// ===================================================================

class SizzEvent_EventData : public ::google::protobuf::MessageLite {
 public:
  SizzEvent_EventData();
  virtual ~SizzEvent_EventData();

  SizzEvent_EventData(const SizzEvent_EventData& from);

  inline SizzEvent_EventData& operator=(const SizzEvent_EventData& from) {
    CopyFrom(from);
    return *this;
  }

  static const SizzEvent_EventData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SizzEvent_EventData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SizzEvent_EventData* other);

  // implements Message ----------------------------------------------

  SizzEvent_EventData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SizzEvent_EventData& from);
  void MergeFrom(const SizzEvent_EventData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SizzEvent_EventData_DATA_TYPES DATA_TYPES;
  static const DATA_TYPES TYPE_STRING = SizzEvent_EventData_DATA_TYPES_TYPE_STRING;
  static const DATA_TYPES TYPE_INT = SizzEvent_EventData_DATA_TYPES_TYPE_INT;
  static const DATA_TYPES TYPE_FLOAT = SizzEvent_EventData_DATA_TYPES_TYPE_FLOAT;
  static inline bool DATA_TYPES_IsValid(int value) {
    return SizzEvent_EventData_DATA_TYPES_IsValid(value);
  }
  static const DATA_TYPES DATA_TYPES_MIN =
    SizzEvent_EventData_DATA_TYPES_DATA_TYPES_MIN;
  static const DATA_TYPES DATA_TYPES_MAX =
    SizzEvent_EventData_DATA_TYPES_DATA_TYPES_MAX;
  static const int DATA_TYPES_ARRAYSIZE =
    SizzEvent_EventData_DATA_TYPES_DATA_TYPES_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string data_key = 1;
  inline bool has_data_key() const;
  inline void clear_data_key();
  static const int kDataKeyFieldNumber = 1;
  inline const ::std::string& data_key() const;
  inline void set_data_key(const ::std::string& value);
  inline void set_data_key(const char* value);
  inline void set_data_key(const char* value, size_t size);
  inline ::std::string* mutable_data_key();
  inline ::std::string* release_data_key();
  inline void set_allocated_data_key(::std::string* data_key);

  // required bytes data_value = 2;
  inline bool has_data_value() const;
  inline void clear_data_value();
  static const int kDataValueFieldNumber = 2;
  inline const ::std::string& data_value() const;
  inline void set_data_value(const ::std::string& value);
  inline void set_data_value(const char* value);
  inline void set_data_value(const void* value, size_t size);
  inline ::std::string* mutable_data_value();
  inline ::std::string* release_data_value();
  inline void set_allocated_data_value(::std::string* data_value);

  // optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  inline ::SizzEvent::SizzEvent_EventData_DATA_TYPES data_type() const;
  inline void set_data_type(::SizzEvent::SizzEvent_EventData_DATA_TYPES value);

  // optional uint32 data_length = 4;
  inline bool has_data_length() const;
  inline void clear_data_length();
  static const int kDataLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 data_length() const;
  inline void set_data_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SizzEvent.SizzEvent.EventData)
 private:
  inline void set_has_data_key();
  inline void clear_has_data_key();
  inline void set_has_data_value();
  inline void clear_has_data_value();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_data_length();
  inline void clear_has_data_length();

  ::std::string* data_key_;
  ::std::string* data_value_;
  int data_type_;
  ::google::protobuf::uint32 data_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SizzEvent_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SizzEvent_2eproto();
  #endif
  friend void protobuf_AssignDesc_SizzEvent_2eproto();
  friend void protobuf_ShutdownFile_SizzEvent_2eproto();

  void InitAsDefaultInstance();
  static SizzEvent_EventData* default_instance_;
};
// -------------------------------------------------------------------

class SizzEvent : public ::google::protobuf::MessageLite {
 public:
  SizzEvent();
  virtual ~SizzEvent();

  SizzEvent(const SizzEvent& from);

  inline SizzEvent& operator=(const SizzEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const SizzEvent& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SizzEvent* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SizzEvent* other);

  // implements Message ----------------------------------------------

  SizzEvent* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SizzEvent& from);
  void MergeFrom(const SizzEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SizzEvent_EventData EventData;

  // accessors -------------------------------------------------------

  // required uint32 message_version = 1;
  inline bool has_message_version() const;
  inline void clear_message_version();
  static const int kMessageVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 message_version() const;
  inline void set_message_version(::google::protobuf::uint32 value);

  // required uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .SizzEvent.SizzEvent.EventData event_data = 4;
  inline int event_data_size() const;
  inline void clear_event_data();
  static const int kEventDataFieldNumber = 4;
  inline const ::SizzEvent::SizzEvent_EventData& event_data(int index) const;
  inline ::SizzEvent::SizzEvent_EventData* mutable_event_data(int index);
  inline ::SizzEvent::SizzEvent_EventData* add_event_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SizzEvent::SizzEvent_EventData >&
      event_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SizzEvent::SizzEvent_EventData >*
      mutable_event_data();

  // @@protoc_insertion_point(class_scope:SizzEvent.SizzEvent)
 private:
  inline void set_has_message_version();
  inline void clear_has_message_version();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::uint32 message_version_;
  ::google::protobuf::uint32 timestamp_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::SizzEvent::SizzEvent_EventData > event_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SizzEvent_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SizzEvent_2eproto();
  #endif
  friend void protobuf_AssignDesc_SizzEvent_2eproto();
  friend void protobuf_ShutdownFile_SizzEvent_2eproto();

  void InitAsDefaultInstance();
  static SizzEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// SizzEvent_EventData

// required string data_key = 1;
inline bool SizzEvent_EventData::has_data_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizzEvent_EventData::set_has_data_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizzEvent_EventData::clear_has_data_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizzEvent_EventData::clear_data_key() {
  if (data_key_ != &::google::protobuf::internal::kEmptyString) {
    data_key_->clear();
  }
  clear_has_data_key();
}
inline const ::std::string& SizzEvent_EventData::data_key() const {
  return *data_key_;
}
inline void SizzEvent_EventData::set_data_key(const ::std::string& value) {
  set_has_data_key();
  if (data_key_ == &::google::protobuf::internal::kEmptyString) {
    data_key_ = new ::std::string;
  }
  data_key_->assign(value);
}
inline void SizzEvent_EventData::set_data_key(const char* value) {
  set_has_data_key();
  if (data_key_ == &::google::protobuf::internal::kEmptyString) {
    data_key_ = new ::std::string;
  }
  data_key_->assign(value);
}
inline void SizzEvent_EventData::set_data_key(const char* value, size_t size) {
  set_has_data_key();
  if (data_key_ == &::google::protobuf::internal::kEmptyString) {
    data_key_ = new ::std::string;
  }
  data_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SizzEvent_EventData::mutable_data_key() {
  set_has_data_key();
  if (data_key_ == &::google::protobuf::internal::kEmptyString) {
    data_key_ = new ::std::string;
  }
  return data_key_;
}
inline ::std::string* SizzEvent_EventData::release_data_key() {
  clear_has_data_key();
  if (data_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_key_;
    data_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SizzEvent_EventData::set_allocated_data_key(::std::string* data_key) {
  if (data_key_ != &::google::protobuf::internal::kEmptyString) {
    delete data_key_;
  }
  if (data_key) {
    set_has_data_key();
    data_key_ = data_key;
  } else {
    clear_has_data_key();
    data_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data_value = 2;
inline bool SizzEvent_EventData::has_data_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizzEvent_EventData::set_has_data_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizzEvent_EventData::clear_has_data_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizzEvent_EventData::clear_data_value() {
  if (data_value_ != &::google::protobuf::internal::kEmptyString) {
    data_value_->clear();
  }
  clear_has_data_value();
}
inline const ::std::string& SizzEvent_EventData::data_value() const {
  return *data_value_;
}
inline void SizzEvent_EventData::set_data_value(const ::std::string& value) {
  set_has_data_value();
  if (data_value_ == &::google::protobuf::internal::kEmptyString) {
    data_value_ = new ::std::string;
  }
  data_value_->assign(value);
}
inline void SizzEvent_EventData::set_data_value(const char* value) {
  set_has_data_value();
  if (data_value_ == &::google::protobuf::internal::kEmptyString) {
    data_value_ = new ::std::string;
  }
  data_value_->assign(value);
}
inline void SizzEvent_EventData::set_data_value(const void* value, size_t size) {
  set_has_data_value();
  if (data_value_ == &::google::protobuf::internal::kEmptyString) {
    data_value_ = new ::std::string;
  }
  data_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SizzEvent_EventData::mutable_data_value() {
  set_has_data_value();
  if (data_value_ == &::google::protobuf::internal::kEmptyString) {
    data_value_ = new ::std::string;
  }
  return data_value_;
}
inline ::std::string* SizzEvent_EventData::release_data_value() {
  clear_has_data_value();
  if (data_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_value_;
    data_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SizzEvent_EventData::set_allocated_data_value(::std::string* data_value) {
  if (data_value_ != &::google::protobuf::internal::kEmptyString) {
    delete data_value_;
  }
  if (data_value) {
    set_has_data_value();
    data_value_ = data_value;
  } else {
    clear_has_data_value();
    data_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
inline bool SizzEvent_EventData::has_data_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SizzEvent_EventData::set_has_data_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SizzEvent_EventData::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SizzEvent_EventData::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::SizzEvent::SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::data_type() const {
  return static_cast< ::SizzEvent::SizzEvent_EventData_DATA_TYPES >(data_type_);
}
inline void SizzEvent_EventData::set_data_type(::SizzEvent::SizzEvent_EventData_DATA_TYPES value) {
  assert(::SizzEvent::SizzEvent_EventData_DATA_TYPES_IsValid(value));
  set_has_data_type();
  data_type_ = value;
}

// optional uint32 data_length = 4;
inline bool SizzEvent_EventData::has_data_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SizzEvent_EventData::set_has_data_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SizzEvent_EventData::clear_has_data_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SizzEvent_EventData::clear_data_length() {
  data_length_ = 0u;
  clear_has_data_length();
}
inline ::google::protobuf::uint32 SizzEvent_EventData::data_length() const {
  return data_length_;
}
inline void SizzEvent_EventData::set_data_length(::google::protobuf::uint32 value) {
  set_has_data_length();
  data_length_ = value;
}

// -------------------------------------------------------------------

// SizzEvent

// required uint32 message_version = 1;
inline bool SizzEvent::has_message_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizzEvent::set_has_message_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizzEvent::clear_has_message_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizzEvent::clear_message_version() {
  message_version_ = 0u;
  clear_has_message_version();
}
inline ::google::protobuf::uint32 SizzEvent::message_version() const {
  return message_version_;
}
inline void SizzEvent::set_message_version(::google::protobuf::uint32 value) {
  set_has_message_version();
  message_version_ = value;
}

// required uint32 timestamp = 2;
inline bool SizzEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizzEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizzEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizzEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 SizzEvent::timestamp() const {
  return timestamp_;
}
inline void SizzEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string name = 3;
inline bool SizzEvent::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SizzEvent::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SizzEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SizzEvent::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SizzEvent::name() const {
  return *name_;
}
inline void SizzEvent::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SizzEvent::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SizzEvent::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SizzEvent::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SizzEvent::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SizzEvent::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SizzEvent.SizzEvent.EventData event_data = 4;
inline int SizzEvent::event_data_size() const {
  return event_data_.size();
}
inline void SizzEvent::clear_event_data() {
  event_data_.Clear();
}
inline const ::SizzEvent::SizzEvent_EventData& SizzEvent::event_data(int index) const {
  return event_data_.Get(index);
}
inline ::SizzEvent::SizzEvent_EventData* SizzEvent::mutable_event_data(int index) {
  return event_data_.Mutable(index);
}
inline ::SizzEvent::SizzEvent_EventData* SizzEvent::add_event_data() {
  return event_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SizzEvent::SizzEvent_EventData >&
SizzEvent::event_data() const {
  return event_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SizzEvent::SizzEvent_EventData >*
SizzEvent::mutable_event_data() {
  return &event_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SizzEvent

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SizzEvent_2eproto__INCLUDED
