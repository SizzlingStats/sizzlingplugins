// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SizzEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SizzEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SizzEvent {

namespace {

const ::google::protobuf::Descriptor* SizzEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizzEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizzEvent_EventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizzEvent_EventData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SizzEvent_EventData_DATA_TYPES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SizzEvent_2eproto() {
  protobuf_AddDesc_SizzEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SizzEvent.proto");
  GOOGLE_CHECK(file != NULL);
  SizzEvent_descriptor_ = file->message_type(0);
  static const int SizzEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, message_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, event_data_),
  };
  SizzEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SizzEvent_descriptor_,
      SizzEvent::default_instance_,
      SizzEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SizzEvent));
  SizzEvent_EventData_descriptor_ = SizzEvent_descriptor_->nested_type(0);
  static const int SizzEvent_EventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, data_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, data_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, data_length_),
  };
  SizzEvent_EventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SizzEvent_EventData_descriptor_,
      SizzEvent_EventData::default_instance_,
      SizzEvent_EventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizzEvent_EventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SizzEvent_EventData));
  SizzEvent_EventData_DATA_TYPES_descriptor_ = SizzEvent_EventData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SizzEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SizzEvent_descriptor_, &SizzEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SizzEvent_EventData_descriptor_, &SizzEvent_EventData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SizzEvent_2eproto() {
  delete SizzEvent::default_instance_;
  delete SizzEvent_reflection_;
  delete SizzEvent_EventData::default_instance_;
  delete SizzEvent_EventData_reflection_;
}

void protobuf_AddDesc_SizzEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SizzEvent.proto\022\tSizzEvent\"\275\002\n\tSizzEve"
    "nt\022\027\n\017message_version\030\001 \002(\r\022\021\n\ttimestamp"
    "\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\0222\n\nevent_data\030\004 \003(\013"
    "2\036.SizzEvent.SizzEvent.EventData\032\301\001\n\tEve"
    "ntData\022\020\n\010data_key\030\001 \002(\t\022\022\n\ndata_value\030\002"
    " \002(\014\022<\n\tdata_type\030\003 \001(\0162).SizzEvent.Sizz"
    "Event.EventData.DATA_TYPES\022\023\n\013data_lengt"
    "h\030\004 \001(\r\";\n\nDATA_TYPES\022\017\n\013TYPE_STRING\020\001\022\014"
    "\n\010TYPE_INT\020\002\022\016\n\nTYPE_FLOAT\020\003", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SizzEvent.proto", &protobuf_RegisterTypes);
  SizzEvent::default_instance_ = new SizzEvent();
  SizzEvent_EventData::default_instance_ = new SizzEvent_EventData();
  SizzEvent::default_instance_->InitAsDefaultInstance();
  SizzEvent_EventData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SizzEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SizzEvent_2eproto {
  StaticDescriptorInitializer_SizzEvent_2eproto() {
    protobuf_AddDesc_SizzEvent_2eproto();
  }
} static_descriptor_initializer_SizzEvent_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SizzEvent_EventData_DATA_TYPES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizzEvent_EventData_DATA_TYPES_descriptor_;
}
bool SizzEvent_EventData_DATA_TYPES_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::TYPE_STRING;
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::TYPE_INT;
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::TYPE_FLOAT;
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::DATA_TYPES_MIN;
const SizzEvent_EventData_DATA_TYPES SizzEvent_EventData::DATA_TYPES_MAX;
const int SizzEvent_EventData::DATA_TYPES_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SizzEvent_EventData::kDataKeyFieldNumber;
const int SizzEvent_EventData::kDataValueFieldNumber;
const int SizzEvent_EventData::kDataTypeFieldNumber;
const int SizzEvent_EventData::kDataLengthFieldNumber;
#endif  // !_MSC_VER

SizzEvent_EventData::SizzEvent_EventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SizzEvent_EventData::InitAsDefaultInstance() {
}

SizzEvent_EventData::SizzEvent_EventData(const SizzEvent_EventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SizzEvent_EventData::SharedCtor() {
  _cached_size_ = 0;
  data_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_type_ = 1;
  data_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SizzEvent_EventData::~SizzEvent_EventData() {
  SharedDtor();
}

void SizzEvent_EventData::SharedDtor() {
  if (data_key_ != &::google::protobuf::internal::kEmptyString) {
    delete data_key_;
  }
  if (data_value_ != &::google::protobuf::internal::kEmptyString) {
    delete data_value_;
  }
  if (this != default_instance_) {
  }
}

void SizzEvent_EventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizzEvent_EventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizzEvent_EventData_descriptor_;
}

const SizzEvent_EventData& SizzEvent_EventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SizzEvent_2eproto();
  return *default_instance_;
}

SizzEvent_EventData* SizzEvent_EventData::default_instance_ = NULL;

SizzEvent_EventData* SizzEvent_EventData::New() const {
  return new SizzEvent_EventData;
}

void SizzEvent_EventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data_key()) {
      if (data_key_ != &::google::protobuf::internal::kEmptyString) {
        data_key_->clear();
      }
    }
    if (has_data_value()) {
      if (data_value_ != &::google::protobuf::internal::kEmptyString) {
        data_value_->clear();
      }
    }
    data_type_ = 1;
    data_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SizzEvent_EventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_key().data(), this->data_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_value;
        break;
      }

      // required bytes data_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }

      // optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SizzEvent::SizzEvent_EventData_DATA_TYPES_IsValid(value)) {
            set_data_type(static_cast< ::SizzEvent::SizzEvent_EventData_DATA_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_length;
        break;
      }

      // optional uint32 data_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
          set_has_data_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SizzEvent_EventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data_key = 1;
  if (has_data_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_key().data(), this->data_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data_key(), output);
  }

  // required bytes data_value = 2;
  if (has_data_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data_value(), output);
  }

  // optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  // optional uint32 data_length = 4;
  if (has_data_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SizzEvent_EventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data_key = 1;
  if (has_data_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_key().data(), this->data_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_key(), target);
  }

  // required bytes data_value = 2;
  if (has_data_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data_value(), target);
  }

  // optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  // optional uint32 data_length = 4;
  if (has_data_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SizzEvent_EventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data_key = 1;
    if (has_data_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_key());
    }

    // required bytes data_value = 2;
    if (has_data_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_value());
    }

    // optional .SizzEvent.SizzEvent.EventData.DATA_TYPES data_type = 3;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional uint32 data_length = 4;
    if (has_data_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizzEvent_EventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SizzEvent_EventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SizzEvent_EventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SizzEvent_EventData::MergeFrom(const SizzEvent_EventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_key()) {
      set_data_key(from.data_key());
    }
    if (from.has_data_value()) {
      set_data_value(from.data_value());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_data_length()) {
      set_data_length(from.data_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SizzEvent_EventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizzEvent_EventData::CopyFrom(const SizzEvent_EventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizzEvent_EventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SizzEvent_EventData::Swap(SizzEvent_EventData* other) {
  if (other != this) {
    std::swap(data_key_, other->data_key_);
    std::swap(data_value_, other->data_value_);
    std::swap(data_type_, other->data_type_);
    std::swap(data_length_, other->data_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SizzEvent_EventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizzEvent_EventData_descriptor_;
  metadata.reflection = SizzEvent_EventData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SizzEvent::kMessageVersionFieldNumber;
const int SizzEvent::kTimestampFieldNumber;
const int SizzEvent::kNameFieldNumber;
const int SizzEvent::kEventDataFieldNumber;
#endif  // !_MSC_VER

SizzEvent::SizzEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SizzEvent::InitAsDefaultInstance() {
}

SizzEvent::SizzEvent(const SizzEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SizzEvent::SharedCtor() {
  _cached_size_ = 0;
  message_version_ = 0u;
  timestamp_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SizzEvent::~SizzEvent() {
  SharedDtor();
}

void SizzEvent::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SizzEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizzEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizzEvent_descriptor_;
}

const SizzEvent& SizzEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SizzEvent_2eproto();
  return *default_instance_;
}

SizzEvent* SizzEvent::default_instance_ = NULL;

SizzEvent* SizzEvent::New() const {
  return new SizzEvent;
}

void SizzEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_version_ = 0u;
    timestamp_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  event_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SizzEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_version_)));
          set_has_message_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_data;
        break;
      }

      // repeated .SizzEvent.SizzEvent.EventData event_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SizzEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_version = 1;
  if (has_message_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_version(), output);
  }

  // required uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .SizzEvent.SizzEvent.EventData event_data = 4;
  for (int i = 0; i < this->event_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SizzEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_version = 1;
  if (has_message_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_version(), target);
  }

  // required uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .SizzEvent.SizzEvent.EventData event_data = 4;
  for (int i = 0; i < this->event_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SizzEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_version = 1;
    if (has_message_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_version());
    }

    // required uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .SizzEvent.SizzEvent.EventData event_data = 4;
  total_size += 1 * this->event_data_size();
  for (int i = 0; i < this->event_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizzEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SizzEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SizzEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SizzEvent::MergeFrom(const SizzEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_data_.MergeFrom(from.event_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_version()) {
      set_message_version(from.message_version());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SizzEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizzEvent::CopyFrom(const SizzEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizzEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < event_data_size(); i++) {
    if (!this->event_data(i).IsInitialized()) return false;
  }
  return true;
}

void SizzEvent::Swap(SizzEvent* other) {
  if (other != this) {
    std::swap(message_version_, other->message_version_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(name_, other->name_);
    event_data_.Swap(&other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SizzEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizzEvent_descriptor_;
  metadata.reflection = SizzEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SizzEvent

// @@protoc_insertion_point(global_scope)
